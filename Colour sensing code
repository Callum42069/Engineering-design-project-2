#pragma config(Sensor, S2,     Gyro,           sensorEV3_Gyro)
#pragma config(Sensor, S3,     Color,          sensorEV3_Color, modeEV3Color_Color)
#pragma config(Sensor, S4,     Ultrasonic,     sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          Grippermotor,  tmotorEV3_Medium, PIDControl, encoder)
#pragma config(Motor,  motorB,          Leftmotor,     tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          Rightmotor,    tmotorEV3_Large, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int colour;	//creates an integer variable called colour

task colourscanner()	//task for getting the current colour from the sensor
{
	while(1)	//runs constantly
	{
		colour = getColorName(Color);	//sets the value from the colour sensor to the colour variable
	}
}

void escaper()	//function for getting off the red line
{
	displayBigTextLine(5, "Red surface detected");	//prints message to screen to say its on red
	playSound(soundBlip);	//sounds an alarm
	setMotorSpeed(Leftmotor, 50);	//moves both motors forwards to drive off the red line
	setMotorSpeed(Rightmotor, 50);
	delay(1000);	//drives forwards for 1 seconds
	//if this does not get the sensor off the red line it will loop back into the function until it is not on the red surface
}

task main()
{
	startTask(colourscanner);	//starts the task to get the current colour
	while(1)	//runs constantly
	{
		displayBigTextLine(5, "d", colour);	//prints the current colour to the screen
		setMotorSpeed(Leftmotor, 25);	//moves forward
		setMotorSpeed(Rightmotor, 25);
		if(colour ==5)	//if the variables value is equal to 5 ... this means the sensor is reading the value for red
		{
			escaper();	//runs the escaper function
		}
		else //if the variables value is not 5 ... sensor is not on red so can drive forward
		{
			setMotorSpeed(Leftmotor, 25);	//moves forward
			setMotorSpeed(Rightmotor, 25);
		}
	}
}
